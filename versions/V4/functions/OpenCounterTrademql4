//+------------------------------------------------------------------+
//| Open Counter Trade Logic                                         |
//+------------------------------------------------------------------+

bool OpenCounterTrade(string symbol, int symbolIndex)
{
    // Check if there is already a primary trade
    if (!HasPrimaryTrade(symbol))
    {
        Print("No primary trade found for ", symbol, ". Counter trade not opened.");
        return false;
    }
    
    // Ensure we do not exceed MAX_TRADES
    if (OrdersTotal() >= MAX_TRADES)
    {
        Print("Maximum trade limit reached (", MAX_TRADES, "). Counter trade not opened for ", symbol);
        return false;
    }
    
    // Check for an existing counter trade
    if (HasOpenTrade(symbol, OP_BUY) && HasOpenTrade(symbol, OP_SELL))
    {
        Print("Counter trade already exists for ", symbol, ". No further counter trades will be opened.");
        return false;
    }

    // Select the existing open trade to determine counter trade
    for (int i = 0; i < OrdersTotal(); i++)
    {
        if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES) && OrderSymbol() == symbol)
        {
            double openPrice = OrderOpenPrice();
            int currentOrderType = OrderType();
            int counterType = (currentOrderType == OP_BUY) ? OP_SELL : OP_BUY;
            double counterPrice = (currentOrderType == OP_BUY)
                                  ? openPrice - CounterPoints * Point
                                  : openPrice + CounterPoints * Point;

            // Get the current market price
            double livePrice = (currentOrderType == OP_BUY) ? Bid : Ask;

            // Ensure the live price satisfies the 50-point difference
            if ((currentOrderType == OP_BUY && (livePrice > counterPrice)) || 
                (currentOrderType == OP_SELL && (livePrice < counterPrice)))
            {
                Print("Live price does not meet the required ", CounterPoints,
                      " point difference for counter trade on ", symbol);
                return false;
            }

            // Prevent multiple counter-trades using the cooling period
            if (TimeCurrent() - lastTradeTimes[symbolIndex] < CoolingPeriod) // Cooling period (10 seconds)
            {
                Print("Cooling period active for counter trade on ", symbol);
                return false;
            }

            // Open the counter trade
            if (OpenTrade(symbol, counterType, livePrice, LotSize))
            {
                lastTradeTimes[symbolIndex] = TimeCurrent(); // Update the last trade time
                Print("Counter trade opened for ", symbol,
                      ". Original Price: ", openPrice,
                      ", Counter Price: ", counterPrice,
                      ", Live Price: ", livePrice);
                return true;
            }
        }
    }

    Print("No valid open trade found for counter-trade logic on ", symbol);
    return false;
}

