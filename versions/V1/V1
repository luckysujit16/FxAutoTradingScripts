//+------------------------------------------------------------------+
//|           MomentumTradeWithTrailingTP.mq5                        |
//|                   Developed by Sujit S Jadhav                    |
//|               Website: https://sujitjadhav.me                     |
//+------------------------------------------------------------------+
#property copyright "Sujit S Jadhav"
#property link      "https://sujitjadhav.me"
#property version   "1.02"

#include <Trade\Trade.mqh>

CTrade trade;  // Initialize trade object

#define MAGICNUMBER 123456  // Unique magic number

// Input parameters
input ENUM_TIMEFRAMES Timeframe = PERIOD_M15;
input double TriggerFactor = 100;
input double LotSize = 0.01;
input double TakeProfit = 50;
input double TrailingStep = 20;
input double GlobalProfitTarget = 100;
input int StartHour = 0;
input int EndHour = 23;
input int MaxTrades = 4;  // ‚úÖ Added MaxTrades to control unlimited trades

int handleMomentum;
int barsTotal;
double virtualTP = 0;
double lastSL = 0;

//+------------------------------------------------------------------+
//| Initialization function                                          |
//+------------------------------------------------------------------+
int OnInit()
{
   handleMomentum = iMomentum(NULL, Timeframe, 14, PRICE_CLOSE);
   barsTotal = iBars(NULL, Timeframe);
   Print("== EA Initialized: Momentum Indicator Set to Timeframe ", Timeframe);
   return INIT_SUCCEEDED;
}

//+------------------------------------------------------------------+
//| Deinitialization function                                        |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   Print("== EA De-initialized. Reason: ", reason);
}

//+------------------------------------------------------------------+
//| Main execution on tick                                           |
//+------------------------------------------------------------------+
void OnTick()
{
   MqlDateTime currentTime;
   TimeToStruct(TimeCurrent(), currentTime);
   int currentHour = currentTime.hour;

   Print("== OnTick Triggered at Hour:", currentHour, " | Total Positions:", PositionsTotal());
   
   CloseProfitablePositions();

   if (currentHour < StartHour || currentHour >= EndHour)
   {
      Print("Trading restricted. Current Hour:", currentHour, " | Allowed: ", StartHour, " - ", EndHour);
      return;
   }

   if (CheckGlobalProfit())
   {
      Print("Global Profit Target Reached! Closing all positions...");
      CloseAllPositions();
      return;
   }

   int bars = iBars(NULL, Timeframe);
   if (barsTotal != bars)
   {
      barsTotal = bars;

      // ‚úÖ Fix: Use CopyBuffer() to get correct momentum value
      double momentumArray[1];  // Buffer to store momentum values
      if (CopyBuffer(handleMomentum, 0, 0, 1, momentumArray) <= 0)
      {
         Print("Error retrieving Momentum indicator. Error:", GetLastError());
         return;
      }
      
      double momentum = momentumArray[0];  // Extract latest momentum value
      double open = iOpen(NULL, Timeframe, 1);
      double close = iClose(NULL, Timeframe, 1);

      Print("Momentum Retrieved: ", momentum, " | Open:", open, ", Close:", close);

      if (momentum > TriggerFactor)
      {
         Print("Momentum above threshold! TriggerFactor:", TriggerFactor);
         
         if (close > open)
         {
            Print("BUY Signal Detected | Momentum:", momentum);
            OpenTrade(ORDER_TYPE_BUY);
         }
         else if (close < open)
         {
            Print("SELL Signal Detected | Momentum:", momentum);
            OpenTrade(ORDER_TYPE_SELL);
         }
      }
      else
      {
         Print("Momentum below threshold. No trade executed.");
      }
   }
}

//+------------------------------------------------------------------+
//| Open Trade (Buy/Sell)                                            |
//+------------------------------------------------------------------+

void OpenTrade(int orderType)
{
   int openTrades = PositionsTotal();
   if (openTrades >= MaxTrades)  
   {
      Print("‚ùå Trade Rejected: MaxTrades limit reached (", openTrades, "/", MaxTrades, ")");
      return;  // ‚úÖ Exit if max trades limit is reached
   }

   double entryPrice = (orderType == ORDER_TYPE_BUY) 
                      ? SymbolInfoDouble(Symbol(), SYMBOL_ASK)  
                      : SymbolInfoDouble(Symbol(), SYMBOL_BID); 

   double minStopLevel = SymbolInfoInteger(Symbol(), SYMBOL_TRADE_STOPS_LEVEL) * _Point; // ‚úÖ Get minimum stop level

   double tp = (orderType == ORDER_TYPE_BUY) 
              ? entryPrice + TakeProfit * _Point 
              : entryPrice - TakeProfit * _Point;

   double sl = 0.0;  
   bool result = false;

   // ‚úÖ Ensure TP is above minimum stop level
   if (orderType == ORDER_TYPE_BUY)
   {
      if ((tp - entryPrice) < minStopLevel) 
      {
         tp = entryPrice + minStopLevel;
         Print("‚ö†Ô∏è Adjusted TP for BUY to meet stop level: ", tp);
      }
   }
   else if (orderType == ORDER_TYPE_SELL)
   {
      if ((entryPrice - tp) < minStopLevel) 
      {
         tp = entryPrice - minStopLevel;
         Print("‚ö†Ô∏è Adjusted TP for SELL to meet stop level: ", tp);
      }
   }

   // ‚úÖ Validate Lot Size
   double minLot = SymbolInfoDouble(Symbol(), SYMBOL_VOLUME_MIN);
   double maxLot = SymbolInfoDouble(Symbol(), SYMBOL_VOLUME_MAX);
   double lotStep = SymbolInfoDouble(Symbol(), SYMBOL_VOLUME_STEP);

   if (LotSize < minLot || LotSize > maxLot || fmod(LotSize, lotStep) != 0)
   {
      Print("‚ùå Error: LotSize", LotSize, " is invalid. Min:", minLot, " Max:", maxLot, " Step:", lotStep);
      return;
   }

   // ‚úÖ Check Free Margin
   double freeMargin = AccountInfoDouble(ACCOUNT_FREEMARGIN);
   double marginRequired = LotSize * SymbolInfoDouble(Symbol(), SYMBOL_MARGIN_INITIAL);

   if (freeMargin < marginRequired)
   {
      Print("‚ùå Error: Not enough free margin. Required:", marginRequired, " Available:", freeMargin);
      return;
   }

   // ‚úÖ Check if trading is allowed
   if (SymbolInfoInteger(Symbol(), SYMBOL_TRADE_MODE) != SYMBOL_TRADE_MODE_FULL)
   {
      Print("‚ùå Error: Trading is disabled for this symbol:", Symbol());
      return;
   }

   Print("üìå Attempting Trade -> Type:", (orderType == ORDER_TYPE_BUY ? "BUY" : "SELL"), 
         ", Price:", entryPrice, ", TP:", tp, " | LotSize:", LotSize, " | Open Trades:", openTrades);

   if (orderType == ORDER_TYPE_BUY)
      result = trade.Buy(LotSize, Symbol(), 0.0, sl, tp, "Momentum Buy");  
   else if (orderType == ORDER_TYPE_SELL)
      result = trade.Sell(LotSize, Symbol(), 0.0, sl, tp, "Momentum Sell"); 

   if (result)
   {
      virtualTP = tp;
      lastSL = sl;
      Print("‚úÖ Trade SUCCESS | Type:", (orderType == ORDER_TYPE_BUY ? "BUY" : "SELL"), 
            ", TP:", tp, ", LotSize:", LotSize, ", Total Trades:", PositionsTotal());
   }
   else
   {
      Print("‚ùå Trade FAILED | Error Code:", GetLastError(), 
            " | Ask:", SymbolInfoDouble(Symbol(), SYMBOL_ASK), 
            " | Bid:", SymbolInfoDouble(Symbol(), SYMBOL_BID), 
            " | LotSize:", LotSize, 
            " | Free Margin:", freeMargin, 
            " | Open Trades:", PositionsTotal(), 
            " | Min Stop Level:", minStopLevel);
   }
}



//+------------------------------------------------------------------+
//| Manage Open Orders (Trailing TP and SL)                         |
//+------------------------------------------------------------------+
void ManageOpenOrders()
{
   int totalPositions = PositionsTotal();
   Print("Managing Open Orders | Total Open Positions:", totalPositions);

   for (int i = totalPositions - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);  // ‚úÖ Get position ticket
      if (ticket > 0 && PositionSelectByTicket(ticket))  // ‚úÖ Corrected selection function
      {
         long positionType = PositionGetInteger(POSITION_TYPE);  // ‚úÖ Use `long` instead of `int`
         double currentPrice = (positionType == POSITION_TYPE_BUY) 
                              ? SymbolInfoDouble(Symbol(), SYMBOL_BID)  
                              : SymbolInfoDouble(Symbol(), SYMBOL_ASK);

         Print("Checking Trade | Ticket:", ticket, 
               ", Current Price:", currentPrice, ", Virtual TP:", virtualTP);

         // ‚úÖ Check if SL/TP needs updating
         if ((positionType == POSITION_TYPE_BUY && currentPrice >= virtualTP) ||
             (positionType == POSITION_TYPE_SELL && currentPrice <= virtualTP))
         {
            double newSL = virtualTP;
            lastSL = newSL;

            if (positionType == POSITION_TYPE_BUY)
               virtualTP += TrailingStep * _Point;
            else
               virtualTP -= TrailingStep * _Point;

            Print("Updating SL/TP | Ticket:", ticket, ", New SL:", newSL, ", New Virtual TP:", virtualTP);

            if (trade.PositionModify(ticket, newSL, virtualTP))
               Print("‚úÖ Updated SL/TP Successfully | Ticket:", ticket);
            else
               Print("‚ùå Failed to Update SL/TP | Ticket:", ticket, 
                     ", Error Code:", GetLastError());
         }
         else
         {
            Print("‚úÖ No SL/TP Update Needed | Ticket:", ticket);
         }
      }
      else
      {
         Print("‚ö†Ô∏è Warning: Unable to Select Position for Ticket:", ticket);
      }
   }
}


//+------------------------------------------------------------------+
//| Check Global Profit Target                                       |
//+------------------------------------------------------------------+

bool CheckGlobalProfit()
{
   double totalProfit = 0.0;
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if (ticket > 0 && PositionSelectByTicket(ticket))
      {
         totalProfit += PositionGetDouble(POSITION_PROFIT);
      }
   }

   Print("Checking Global Profit | Current:", totalProfit, " | Target:", GlobalProfitTarget);
   return totalProfit >= GlobalProfitTarget;
}

//+------------------------------------------------------------------+
//| Close All Positions                                              |
//+------------------------------------------------------------------+
void CloseAllPositions()
{
   int totalPositions = PositionsTotal();
   Print("Closing All Positions | Total Open Positions:", totalPositions);

   for (int i = totalPositions - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);  // ‚úÖ Get position ticket
      if (ticket > 0 && PositionSelectByTicket(ticket))  // ‚úÖ Corrected selection function
      {
         double volume = PositionGetDouble(POSITION_VOLUME);
         double closePrice = PositionGetDouble(POSITION_PRICE_OPEN);

         Print("Attempting to Close Position | Ticket:", ticket, 
               ", Volume:", volume, ", Open Price:", closePrice);

         if (trade.PositionClose(ticket))  // ‚úÖ Corrected closing method
         {
            Print("‚úÖ Closed Position Successfully | Ticket:", ticket);
         }
         else
         {
            Print("‚ùå Failed to Close Position | Ticket:", ticket, 
                  ", Error Code:", GetLastError());
         }
      }
      else
      {
         Print("‚ö†Ô∏è Warning: Unable to Select Position for Ticket:", ticket);
      }
   }
}

//+------------------------------------------------------------------+
//| Close Profitable Positions                                              |
//+------------------------------------------------------------------+
void CloseProfitablePositions()
{
   int totalPositions = PositionsTotal();
   Print("üîç Checking Positions for Profit Closure | Total Open Positions:", totalPositions);

   if (totalPositions == 0)
   {
      Print("‚úÖ No open positions to check.");
      return;  // ‚úÖ Exit if no positions exist
   }

   for (int i = totalPositions - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if (ticket > 0 && PositionSelectByTicket(ticket))  
      {
         long positionType = PositionGetInteger(POSITION_TYPE);
         double volume = PositionGetDouble(POSITION_VOLUME);
         double openPrice = PositionGetDouble(POSITION_PRICE_OPEN);
         double currentProfit = PositionGetDouble(POSITION_PROFIT);
         string tradeType = (positionType == POSITION_TYPE_BUY) ? "BUY" : "SELL";

         Print("üìä Checking Trade | Ticket:", ticket, 
               ", Type:", tradeType, ", Volume:", volume, 
               ", Open Price:", openPrice, ", Current Profit:", currentProfit);

         if (currentProfit > 1.00)  // ‚úÖ Close trade if profit > $1
         {
            Print("‚úÖ Profit Target Reached ($1) -> Closing Position | Ticket:", ticket);

            if (trade.PositionClose(ticket))  
            {
               Print("‚úÖ Successfully Closed Profitable Trade | Ticket:", ticket, 
                     ", Profit:", currentProfit);
            }
            else
            {
               Print("‚ùå Failed to Close Position | Ticket:", ticket, 
                     ", Error Code:", GetLastError());
            }
         }
         else
         {
            Print("‚è≥ Profit Below Target ($1) | Ticket:", ticket, ", Profit:", currentProfit);
         }
      }
      else
      {
         Print("‚ö†Ô∏è Warning: Unable to Select Position for Ticket:", ticket);
      }
   }

   Print("‚úÖ Profit-Based Position Closure Check Completed.");
}

