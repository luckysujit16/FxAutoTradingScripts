#property copyright "Copyright 2025, Sujit Jadhav."
#property link      "https://www.sujitjadhav.me"
#property version   "1.01"

#include <trade/trade.mqh>

// Inputs
input ENUM_TIMEFRAMES Timeframe = PERIOD_M15;  // Timeframe for momentum
input double TriggerFactor = 100;              // Momentum trigger level
input double LotSize = 0.1;                    // Lot size
input double TakeProfit = 50;                  // Initial take profit in points
input double TrailingStep = 20;                // Trailing step in points
input double GlobalProfitTarget = 100;         // Global profit in currency units (USD)
input int StartHour = 9;                       // Start trading at this hour (24-hour format)
input int EndHour = 17;                        // Stop trading at this hour (24-hour format)

// Declare variables
int handleMomentum;  // Handle for the Momentum indicator
int barsTotal;       // Store the number of bars for comparison

// Structure to store virtual TP and SL
struct TradeMemory
{
   double virtualTP;  // Virtual Take-Profit
   double lastSL;     // Last Stop-Loss (for debugging)
};
TradeMemory tradeMemory;

CTrade trade;

int OnInit()
{
   // Initialize momentum indicator
   handleMomentum = iMomentum(NULL, Timeframe, 14, PRICE_CLOSE);
   barsTotal = iBars(NULL, Timeframe);
   Print("== EA Initialized: Momentum Indicator Initialized with Timeframe ", Timeframe);
   return INIT_SUCCEEDED;
}

void OnDeinit(const int reason)
{
   Print("== EA De-initialized. Reason: ", reason);
}

void OnTick()
{
   Print("========================= OnTick Triggered =========================");

   // Check if the current time is within allowed trading hours
   // Create a datetime structure to store the time components
   
   MqlDateTime timeStruct;
   
   TimeToStruct(TimeCurrent(), timeStruct);  // Convert current time to a time structure

   int currentHour = timeStruct.hour;  // Get the current hour from the structure
   
   Print("Current Hour: ", currentHour);
   if (currentHour < StartHour || currentHour >= EndHour)
   {
      Print("Trading is restricted during this time. Current Hour: ", currentHour);
      return;  // Do not open trades outside allowed hours
   }

   // Check global profit target
   if (CheckGlobalProfit())
   {
      Print("Global Profit Target Reached! Closing all positions...");
      CloseAllPositions();
      return;
   }

   int totalPositions = PositionsTotal();
   Print("Total Open Positions: ", totalPositions);
   
   if (totalPositions > 0)
   {
      // Modify open positions for trailing SL and TP
      Print("Managing Open Positions...");
      ManageOpenPositions();
      return;
   }

   int bars = iBars(NULL, Timeframe);
   if (barsTotal != bars)
   {
      //barsTotal = bars;  // Update bar count
      double momentum[];
      CopyBuffer(handleMomentum, 0, 1, 1, momentum);
      double open = iOpen(NULL, Timeframe, 1);
      double close = iClose(NULL, Timeframe, 1);

      Print("Last Candle: Open = ", open, ", Close = ", close, ", Momentum = ", momentum[0]);

      if (open > close)  // Last candle was red (potential sell signal)
      {
         if (momentum[0] > TriggerFactor)
         {
            Print("Sell Signal Triggered. Momentum (", momentum[0], ") > TriggerFactor (", TriggerFactor, ")");
            OpenTrade(ORDER_TYPE_SELL);
         }
         else
         {
            Print("Sell Signal Not Triggered: Momentum (", momentum[0], ") <= TriggerFactor (", TriggerFactor, ")");
         }
      }
      else if (close > open)  // Last candle was green (potential buy signal)
      {
         if (momentum[0] > TriggerFactor)
         {
            Print("Buy Signal Triggered. Momentum (", momentum[0], ") > TriggerFactor (", TriggerFactor, ")");
            OpenTrade(ORDER_TYPE_BUY);
         }
         else
         {
            Print("Buy Signal Not Triggered: Momentum (", momentum[0], ") <= TriggerFactor (", TriggerFactor, ")");
         }
      }
   }
}

// Function to open buy/sell trades
void OpenTrade(int orderType)
{
   double entryPrice = (orderType == ORDER_TYPE_BUY) ? SymbolInfoDouble(NULL, SYMBOL_ASK) : SymbolInfoDouble(NULL, SYMBOL_BID);
   entryPrice = NormalizeDouble(entryPrice, _Digits);

   double tp = (orderType == ORDER_TYPE_BUY) ? entryPrice + TakeProfit * _Point : entryPrice - TakeProfit * _Point;
   tp = NormalizeDouble(tp, _Digits);

   // Store the first take-profit in virtual memory
   tradeMemory.virtualTP = tp;
   tradeMemory.lastSL = 0;  // No stop-loss initially

   bool tradeResult = (orderType == ORDER_TYPE_BUY) ? trade.Buy(LotSize, NULL, 0, 0, tp) : trade.Sell(LotSize, NULL, 0, 0, tp);

   if (tradeResult)
      Print((orderType == ORDER_TYPE_BUY ? "Buy" : "Sell"), " Order Placed Successfully at: ", entryPrice, " with TP: ", tp);
   else
      Print((orderType == ORDER_TYPE_BUY ? "Buy" : "Sell"), " Order Failed. Error: ", GetLastError());
}

// Function to manage trailing TP and virtual SL
void ManageOpenPositions()
{
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      if (PositionGetSymbol(i) == _Symbol)
      {
         ulong positionTicket = PositionGetInteger(POSITION_TICKET);
         long positionType = PositionGetInteger(POSITION_TYPE);
         double currentPrice = (positionType == POSITION_TYPE_BUY) ? SymbolInfoDouble(_Symbol, SYMBOL_BID) : SymbolInfoDouble(_Symbol, SYMBOL_ASK);
         double virtualTP = tradeMemory.virtualTP;
         double trailingStep = TrailingStep * _Point;

         Print("Current Price: ", currentPrice, ", Virtual TP: ", virtualTP);

         // If price crosses the virtual TP
         if ((positionType == POSITION_TYPE_BUY && currentPrice >= virtualTP) ||
             (positionType == POSITION_TYPE_SELL && currentPrice <= virtualTP))
         {
            // Set new stop-loss at the current virtual TP
            double newSL = virtualTP;
            tradeMemory.lastSL = newSL;  // For debugging

            // Update virtual TP for the next trailing step
            if (positionType == POSITION_TYPE_BUY)
               tradeMemory.virtualTP += trailingStep;
            else
               tradeMemory.virtualTP -= trailingStep;

            // Modify the position to update SL
            MqlTradeRequest request;
            MqlTradeResult result;
            ZeroMemory(request);
            ZeroMemory(result);

            request.action = TRADE_ACTION_SLTP;
            request.position = positionTicket;
            request.symbol = _Symbol;
            request.sl = NormalizeDouble(newSL, _Digits);  // Set new SL
            request.tp = tradeMemory.virtualTP;  // Keep trailing TP

            if (!OrderSend(request, result))
               Print("Failed to update stop-loss for position: ", GetLastError());
            else
               Print("Stop-loss updated to: ", newSL, " and new virtual TP set to: ", tradeMemory.virtualTP);
         }
      }
   }
}

// Function to check if global profit target is reached
bool CheckGlobalProfit()
{
   double totalProfit = 0.0;  // Sum of all profits for the symbol

   for (int i = 0; i < PositionsTotal(); i++)
   {
      if (PositionGetSymbol(i) == _Symbol && PositionSelect(_Symbol))  // Select position for the symbol
      {
         totalProfit += PositionGetDouble(POSITION_PROFIT);  // Add position profit
      }
   }

   Print("Current Total Profit: ", totalProfit, ", Global Profit Target: ", GlobalProfitTarget);

   if (totalProfit >= GlobalProfitTarget)
   {
      Print("Global profit target reached. Total Profit: ", totalProfit);
      return true;  // Profit target reached
   }

   return false;  // Continue trading if the target is not reached
}



// Function to close all open positions
void CloseAllPositions()
{
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      if (PositionGetSymbol(i) == _Symbol)
      {
         ulong positionTicket = PositionGetInteger(POSITION_TICKET);
         if (trade.PositionClose(positionTicket))
            Print("Position ", positionTicket, " closed.");
         else
            Print("Failed to close position ", positionTicket, ". Error: ", GetLastError());
      }
   }
}
