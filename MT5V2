//+------------------------------------------------------------------+
//|                   MomentumTradeWithTrailingTPAndCounterTrade.mq5 |
//|                                                   Sujit S Jadhav |
//|                                       https://www.sujitjadhav.me |
//+------------------------------------------------------------------+
#property copyright "Sujit S Jadhav"
#property link      "https://www.sujitjadhav.me"
#property version   "1.04"

#include <Trade\Trade.mqh>

input int MaxTrades = 10;              // Maximum trades the EA can open
input double LotSize = 0.1;            // Lot size
input double TakeProfit = 50;          // Take profit in points
input double TrailingStop = 20;        // Trailing stop in points
input double TriggerFactor = 100;      // Momentum trigger level
input int Timeframe = PERIOD_M15;      // Timeframe for momentum calculation
input int UpdateInterval = 60;         // Trailing stop update interval in seconds
input int CoolingPeriod = 5;           // Cooling period in seconds between trades

int winCount = 0;                      // Counter for consecutive winning trades
datetime lastTradeTime = 0;            // Time of the last executed trade
bool firstTradeExecuted = false;       // Tracks whether the first trade has been executed

CTrade trade;                          // Trade object for managing orders

//+------------------------------------------------------------------+
//| Expert Initialization                                            |
//+------------------------------------------------------------------+
int OnInit()
{
   Print("== EA Initialized ==");
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert Deinitialization                                          |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   Print("== EA Deinitialized ==");
}

//+------------------------------------------------------------------+
//| Main Function (OnTick)                                           |
//+------------------------------------------------------------------+
void OnTick()
{
   Print("== OnTick Triggered ==");

   // Prevent trades within the cooling period
   if (TimeCurrent() - lastTradeTime < CoolingPeriod)
   {
      Print("Cooling period active. Skipping trade execution.");
      return;
   }

   // Trigger the first trade if no trades exist
   if (PositionsTotal() == 0)
   {
      Print("No trades exist. Executing OpenFirstTrade.");
      OpenFirstTrade();
      if (PositionsTotal() > 0)
      {
         lastTradeTime = TimeCurrent(); // Update the last trade time
      }
      return; // Exit to prevent further execution in the same tick
   }

   // Manage existing trades
   ManageOpenPositions();

   // Open trades with trigger logic
   OpenTradeWithTrigger();
}

//+------------------------------------------------------------------+
//| Open First Trade Based on Momentum                               |
//+------------------------------------------------------------------+
void OpenFirstTrade()
{
   if (PositionsTotal() > 0)
   {
      Print("Trades already exist. Skipping first trade execution.");
      return;
   }

   double momentumValue = iMomentum(NULL, Timeframe, 14, PRICE_CLOSE, 0);
   double lastCandleOpen = iOpen(NULL, Timeframe, 1);
   double lastCandleClose = iClose(NULL, Timeframe, 1);

   Print("Momentum Value: ", momentumValue);
   Print("Last Candle - Open: ", lastCandleOpen, ", Close: ", lastCandleClose);

   if (momentumValue > TriggerFactor && lastCandleClose > lastCandleOpen)
   {
      OpenBuyTrade();
   }
   else if (momentumValue < -TriggerFactor && lastCandleOpen > lastCandleClose)
   {
      OpenSellTrade();
   }
   else
   {
      Print("Momentum condition not met. No first trade executed.");
   }
}

//+------------------------------------------------------------------+
//| Open Trade with Trigger Logic                                    |
//+------------------------------------------------------------------+
void OpenTradeWithTrigger()
{
   if (PositionsTotal() >= MaxTrades)
   {
      Print("MaxTrades limit reached. No new trades will be opened.");
      return;
   }

   double momentumValue = iMomentum(NULL, Timeframe, 14, PRICE_CLOSE, 0);
   double lastCandleOpen = iOpen(NULL, Timeframe, 1);
   double lastCandleClose = iClose(NULL, Timeframe, 1);

   if (momentumValue > TriggerFactor && lastCandleClose > lastCandleOpen)
   {
      OpenBuyTrade();
   }
   else if (momentumValue < -TriggerFactor && lastCandleOpen > lastCandleClose)
   {
      OpenSellTrade();
   }
   lastTradeTime = TimeCurrent();
}

//+------------------------------------------------------------------+
//| Open Buy Trade                                                   |
//+------------------------------------------------------------------+
void OpenBuyTrade()
{
   if (!trade.Buy(LotSize, Symbol(), 0, 0, 0, "Momentum - BUY"))
   {
      Print("Failed to open BUY trade. Error: ", GetLastError());
   }
   else
   {
      Print("BUY trade opened successfully.");
   }
}

//+------------------------------------------------------------------+
//| Open Sell Trade                                                  |
//+------------------------------------------------------------------+
void OpenSellTrade()
{
   if (!trade.Sell(LotSize, Symbol(), 0, 0, 0, "Momentum - SELL"))
   {
      Print("Failed to open SELL trade. Error: ", GetLastError());
   }
   else
   {
      Print("SELL trade opened successfully.");
   }
}

//+------------------------------------------------------------------+
//| Manage Open Positions                                            |
//+------------------------------------------------------------------+
void ManageOpenPositions()
{
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      if (PositionSelectByIndex(i))
      {
         ulong ticket = PositionGetInteger(POSITION_TICKET);
         string symbol = PositionGetString(POSITION_SYMBOL);
         double priceOpen = PositionGetDouble(POSITION_PRICE_OPEN);
         double sl = PositionGetDouble(POSITION_SL);
         double tp = PositionGetDouble(POSITION_TP);

         Print("Managing Position - Ticket: ", ticket, ", Symbol: ", symbol);

         // Example: Modify the position SL and TP (you can add your own logic)
         trade.PositionModify(ticket, priceOpen + 50 * _Point, priceOpen - 50 * _Point);
      }
   }
}
