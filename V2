#property copyright       "Copyright 2025, Sujit Jadhav."
#property link            "https://www.sujitjadhav.me"
#property version         "1.01"
#property codingstandard  "mql4"

#include <trade/trade.mqh>

//+------------------------------------------------------------------+
//| Expert Advisor Initialization                                    |
//+------------------------------------------------------------------+
extern int MinTradeCount = 2;          // Minimum open trades required
extern double LotSize = 0.1;           // Lot size
extern double TakeProfit = 50;         // Take profit in points
extern double TrailingStop = 20;       // Trailing stop in points
extern double TriggerFactor = 100;     // Momentum trigger level
extern int Timeframe = 15;             // Timeframe in minutes

int handleMomentum;                    // Momentum indicator handle
double firstTradePrice = 0;            // Price of the first trade
bool isCounterTrade = false;           // Flag to track counter trade logic

//+------------------------------------------------------------------+
//| Initialization Function                                          |
//+------------------------------------------------------------------+
int init()
{
   if (MinTradeCount < 2)
   {
      Print("Error: MinTradeCount must be at least 2!");
      return(INIT_FAILED);
   }

   handleMomentum = iMomentum(Symbol(), Timeframe, 14, PRICE_CLOSE);  // Initialize Momentum
   if (handleMomentum < 0)
   {
      Print("Failed to initialize Momentum indicator. Error: ", GetLastError());
      return(INIT_FAILED);
   }

   Print("== EA Initialized ==");
   Print("Parameters: MinTradeCount=", MinTradeCount, ", LotSize=", LotSize, 
         ", TakeProfit=", TakeProfit, ", TrailingStop=", TrailingStop, ", TriggerFactor=", TriggerFactor);
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Deinitialization Function                                        |
//+------------------------------------------------------------------+
int deinit()
{
   Print("== EA Deinitialized ==");
   return(0);
}

//+------------------------------------------------------------------+
//| Main Function                                                    |
//+------------------------------------------------------------------+
int start()
{
   Print("== OnTick Triggered ==");
   Print("Total Open Trades: ", OrdersTotal());

   // Check if minimum trades are open
   if (OrdersTotal() < MinTradeCount)
   {
      Print("Opening new trades as total trades (", OrdersTotal(), ") < MinTradeCount (", MinTradeCount, ")");
      OpenTradeWithCounter();
   }
   else
   {
      Print("Sufficient trades are open. Managing positions...");
   }

   // Manage existing trades
   ManageOpenPositions();

   return(0);
}

//+------------------------------------------------------------------+
//| Function to Open a Trade and its Counter Trade                   |
//+------------------------------------------------------------------+
void OpenTradeWithCounter()
{
   double momentumValue = iMomentum(NULL, Timeframe, 14, PRICE_CLOSE);
   Print("Momentum Value: ", momentumValue);

   if (momentumValue > TriggerFactor)
   {
      Print("Momentum Triggered: Opening BUY and Counter SELL trades.");

      // Open BUY trade
      double buyPrice = Ask;
      int buyTicket = OrderSend(Symbol(), OP_BUY, LotSize, buyPrice, 3, 0, buyPrice + TakeProfit * Point, "First Trade - BUY", 0, 0, clrBlue);
      if (buyTicket < 0)
      {
         Print("Failed to open BUY trade. Error: ", GetLastError());
         return;
      }
      Print("BUY trade opened successfully. Ticket: ", buyTicket, ", Price: ", buyPrice, ", TP: ", buyPrice + TakeProfit * Point);

      // Open Counter SELL trade
      double sellPrice = Bid;
      int sellTicket = OrderSend(Symbol(), OP_SELL, LotSize, sellPrice, 3, 0, sellPrice - TakeProfit * Point, "Counter Trade - SELL", 0, 0, clrRed);
      if (sellTicket < 0)
      {
         Print("Failed to open SELL trade. Error: ", GetLastError());
         return;
      }
      Print("SELL trade opened successfully. Ticket: ", sellTicket, ", Price: ", sellPrice, ", TP: ", sellPrice - TakeProfit * Point);

      // Track the first trade price
      firstTradePrice = buyPrice;
      isCounterTrade = true;
   }
   else
   {
      Print("Momentum not triggered. Value (", momentumValue, ") <= TriggerFactor (", TriggerFactor, ")");
   }
}

//+------------------------------------------------------------------+
//| Function to Manage Open Positions                                |
//+------------------------------------------------------------------+
void ManageOpenPositions()
{
   for (int i = 0; i < OrdersTotal(); i++)
   {
      if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
      {
         double openPrice = OrderOpenPrice();
         double currentPrice = (OrderType() == OP_BUY) ? Bid : Ask;
         double profit = OrderProfit();
         Print("Managing Trade. Ticket: ", OrderTicket(), ", Type: ", (OrderType() == OP_BUY ? "BUY" : "SELL"), 
               ", Open Price: ", openPrice, ", Current Price: ", currentPrice, ", Profit: ", profit);

         // Manage trailing stop-loss
         if (OrderType() == OP_BUY && currentPrice > openPrice + TrailingStop * Point)
         {
            double newSL = currentPrice - TrailingStop * Point;
            if (OrderModify(OrderTicket(), openPrice, newSL, OrderTakeProfit(), 0, clrBlue))
               Print("Updated SL for BUY trade. Ticket: ", OrderTicket(), ", New SL: ", newSL);
            else
               Print("Failed to update SL for BUY trade. Error: ", GetLastError());
         }
         else if (OrderType() == OP_SELL && currentPrice < openPrice - TrailingStop * Point)
         {
            double newSL = currentPrice + TrailingStop * Point;
            if (OrderModify(OrderTicket(), openPrice, newSL, OrderTakeProfit(), 0, clrRed))
               Print("Updated SL for SELL trade. Ticket: ", OrderTicket(), ", New SL: ", newSL);
            else
               Print("Failed to update SL for SELL trade. Error: ", GetLastError());
         }

         // Check if trade closed with profit
         if (profit > 0 && OrderCloseTime() > 0)
         {
            Print("Trade closed with profit. Ticket: ", OrderTicket(), ", Profit: ", profit);
            OpenTradeWithCounter();
         }
      }
   }
}
